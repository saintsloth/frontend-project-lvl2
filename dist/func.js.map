{"version":3,"sources":["../src/func.js"],"names":["gendiff","filepath1","filepath2","path1","path","resolve","process","cwd","path2","json1","JSON","parse","fs","readFileSync","json2","json1Entries","_","entries","json2Entries","keys","union","sort","print","forEach","key","findKey1","find","key1","findKey2","key2","value1","value2","stringify","replace"],"mappings":"AAAA;;;;;;;;AAEA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,OAAO,GAAI,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACzC,QAAMC,KAAK,GAAGC,IAAI,CAACC,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4BN,SAA5B,CAAd;AACA,QAAMO,KAAK,GAAGJ,IAAI,CAACC,OAAL,CAAaC,OAAO,CAACC,GAAR,EAAb,EAA4BL,SAA5B,CAAd;AACA,QAAMO,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWC,EAAE,CAACC,YAAH,CAAgBV,KAAhB,EAAuB,MAAvB,CAAX,CAAd;AACA,QAAMW,KAAK,GAAGJ,IAAI,CAACC,KAAL,CAAWC,EAAE,CAACC,YAAH,CAAgBL,KAAhB,EAAuB,MAAvB,CAAX,CAAd;;AACA,QAAMO,YAAY,GAAGC,gBAAEC,OAAF,CAAUR,KAAV,CAArB;;AACA,QAAMS,YAAY,GAAGF,gBAAEC,OAAF,CAAUH,KAAV,CAArB;;AAEA,QAAMK,IAAI,GAAGH,gBAAEI,KAAF,CAAQJ,gBAAEG,IAAF,CAAOV,KAAP,CAAR,EAAuBO,gBAAEG,IAAF,CAAOL,KAAP,CAAvB,EAAsCO,IAAtC,EAAb;;AACA,MAAIC,KAAK,GAAG,EAAZ;AAEAH,EAAAA,IAAI,CAACI,OAAL,CAAcC,GAAD,IAAS;AACpB,UAAMC,QAAQ,GAAGT,gBAAEU,IAAF,CAAOX,YAAP,EAAqB,CAAC,CAACY,IAAD,CAAD,KAAYH,GAAG,KAAKG,IAAzC,CAAjB;;AACA,UAAMC,QAAQ,GAAGZ,gBAAEU,IAAF,CAAOR,YAAP,EAAqB,CAAC,CAACW,IAAD,CAAD,KAAYL,GAAG,KAAKK,IAAzC,CAAjB;;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIN,QAAJ,EAAc,GAAGK,MAAH,IAAaL,QAAb;AACd,QAAIG,QAAJ,EAAc,GAAGG,MAAH,IAAaH,QAAb;;AACd,QAAIE,MAAM,KAAKC,MAAf,EAAuB;AACrBT,MAAAA,KAAK,CAAE,KAAIE,GAAI,EAAV,CAAL,GAAoBM,MAApB;AACD,KAFD,MAEO;AACL,UAAIL,QAAJ,EAAcH,KAAK,CAAE,KAAIE,GAAI,EAAV,CAAL,GAAoBM,MAApB;AACd,UAAIF,QAAJ,EAAcN,KAAK,CAAE,KAAIE,GAAI,EAAV,CAAL,GAAoBO,MAApB;AACf;AACF,GAbD;AAeAT,EAAAA,KAAK,GAAGZ,IAAI,CAACsB,SAAL,CAAeV,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAR;AACA,SAAOA,KAAK,CAACW,OAAN,CAAc,IAAd,EAAoB,EAApB,CAAP;AACD,CA5BD;;eA8BejC,O","sourcesContent":["#!/usr/bin/env node\n\nimport * as fs from 'fs';\nimport _ from 'lodash';\nimport * as path from \"path\";\n\nconst gendiff =  (filepath1, filepath2) => {\n  const path1 = path.resolve(process.cwd(), filepath1);\n  const path2 = path.resolve(process.cwd(), filepath2);\n  const json1 = JSON.parse(fs.readFileSync(path1, 'utf8'));\n  const json2 = JSON.parse(fs.readFileSync(path2, 'utf8'));\n  const json1Entries = _.entries(json1);\n  const json2Entries = _.entries(json2);\n\n  const keys = _.union(_.keys(json1), _.keys(json2)).sort();\n  let print = {};\n\n  keys.forEach((key) => {\n    const findKey1 = _.find(json1Entries, ([key1]) => key === key1);\n    const findKey2 = _.find(json2Entries, ([key2]) => key === key2);\n    let value1 = '';\n    let value2 = '';\n    if (findKey1) [, value1] = findKey1;\n    if (findKey2) [, value2] = findKey2;\n    if (value1 === value2) {\n      print[`  ${key}`] = value1;\n    } else {\n      if (findKey1) print[`- ${key}`] = value1;\n      if (findKey2) print[`+ ${key}`] = value2;\n    }\n  });\n\n  print = JSON.stringify(print, null, 2);\n  return print.replace(/\"/g, '');\n};\n\nexport default gendiff;\n"],"file":"func.js"}